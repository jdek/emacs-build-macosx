diff --git a/lisp/term/ns-win.el b/lisp/term/ns-win.el
index e31362b..611c87b 100644
--- a/lisp/term/ns-win.el
+++ b/lisp/term/ns-win.el
@@ -942,6 +942,10 @@ See the documentation of `create-fontset-from-fontset-spec' for the format.")
 (add-to-list 'frame-creation-function-alist '(ns . x-create-frame-with-faces))
 (add-to-list 'window-system-initialization-alist '(ns . ns-initialize-window-system))
 
+(declare-function ns-toggle-fullscreen-internal "nsfns.m" ())
+(defun ns-toggle-fullscreen ()
+  (interactive)
+  (ns-toggle-fullscreen-internal))
 
 (provide 'ns-win)
 
diff --git a/src/nsfns.m b/src/nsfns.m
index 7a22ac5..d45941c 100644
--- a/src/nsfns.m
+++ b/src/nsfns.m
@@ -2590,6 +2590,20 @@ Value is t if tooltip was open, nil otherwise.  */)
   return Qt;
 }
 
+DEFUN ("ns-toggle-fullscreen-internal", Fns_toggle_fullscreen_internal, Sns_toggle_fullscreen_internal,
+        0, 0, 0,
+        doc: /* Toggle fulscreen mode */)
+()
+{
+  struct frame *f = SELECTED_FRAME();
+  EmacsWindow *window = ns_get_window(f);
+
+#if defined (NS_IMPL_COCOA) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
+  [window toggleFullScreen:nil];
+#endif
+
+  return Qnil;
+}
 
 /* ==========================================================================
 
@@ -2746,6 +2760,8 @@ be used as the image of the icon representing the frame.  */);
   defsubr (&Sx_show_tip);
   defsubr (&Sx_hide_tip);
 
+  defsubr (&Sns_toggle_fullscreen_internal);
+
   /* used only in fontset.c */
   check_window_system_func = check_ns;
 
diff --git a/src/nsmenu.m b/src/nsmenu.m
index d0ea8f5..0e6c6fb 100644
--- a/src/nsmenu.m
+++ b/src/nsmenu.m
@@ -1008,7 +1008,7 @@ free_frame_tool_bar (FRAME_PTR f)
    -------------------------------------------------------------------------- */
 {
   block_input ();
-  [[FRAME_NS_VIEW (f) toolbar] setVisible: NO];
+  [[FRAME_NS_VIEW (f) window] setToolbar: nil];
   FRAME_TOOLBAR_HEIGHT (f) = 0;
   unblock_input ();
 }
@@ -1025,6 +1025,8 @@ update_frame_tool_bar (FRAME_PTR f)
   EmacsToolbar *toolbar = [view toolbar];
 
   block_input ();
+  [window setToolbar: toolbar];
+
   [toolbar clearActive];
 
   /* update EmacsToolbar as in GtkUtils, build items list */
diff --git a/src/nsterm.m b/src/nsterm.m
index a4eaad4..73d8080 100644
--- a/src/nsterm.m
+++ b/src/nsterm.m
@@ -5454,38 +5454,7 @@ not_in_argv (NSString *arg)
 #endif
   if (rows < MINHEIGHT)
     rows = MINHEIGHT;
-#ifdef NS_IMPL_COCOA
-  {
-    /* this sets window title to have size in it; the wm does this under GS */
-    NSRect r = [[self window] frame];
-    if (r.size.height == frameSize.height && r.size.width == frameSize.width)
-      {
-        if (old_title != 0)
-          {
-            xfree (old_title);
-            old_title = 0;
-          }
-      }
-    else
-      {
-        char *size_title;
-        NSWindow *window = [self window];
-        if (old_title == 0)
-          {
-            const char *t = [[[self window] title] UTF8String];
-            char *pos = strstr (t, "  —  ");
-            if (pos)
-              *pos = '\0';
-            old_title = xstrdup (t);
-          }
-        size_title = xmalloc (strlen (old_title) + 40);
-	esprintf (size_title, "%s  —  (%d x %d)", old_title, cols, rows);
-        [window setTitle: [NSString stringWithUTF8String: size_title]];
-        [window display];
-        xfree (size_title);
-      }
-  }
-#endif /* NS_IMPL_COCOA */
+
 /*fprintf (stderr,"    ...size became %.0f x %.0f  (%d x %d)\n",frameSize.width,frameSize.height,cols,rows); */
 
   return frameSize;
@@ -5514,14 +5483,6 @@ not_in_argv (NSString *arg)
   NSTRACE (windowDidResize);
 /*fprintf (stderr,"windowDidResize: %.0f\n",[theWindow frame].size.height); */
 
-#ifdef NS_IMPL_COCOA
-  if (old_title != 0)
-    {
-      xfree (old_title);
-      old_title = 0;
-    }
-#endif /* NS_IMPL_COCOA */
-
   if (cols > 0 && rows > 0)
     {
       [self updateFrameSize: YES];
@@ -5531,6 +5492,63 @@ not_in_argv (NSString *arg)
 }
 
 
+#if defined (NS_IMPL_COCOA) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
+/* Do not use Emacs upstram windowDidEnterFullScreen since it is broken */
+- (void)windowDidEnterFullScreen:(NSNotification *)notification
+{
+    NSTRACE (windowDidEnterFullScreen);
+    /* NSLog(@"Calling windowDidEnterFullScreen"); */
+    NSWindow *window = [self window];
+    NSRect wr = [window frame];
+    int w = (int)wr.size.width - emacsframe->border_width;
+    int h = (int)wr.size.height;
+    NSView *view = FRAME_NS_VIEW (emacsframe);
+    cols = FRAME_PIXEL_WIDTH_TO_TEXT_COLS(emacsframe, w);
+    rows = FRAME_PIXEL_HEIGHT_TO_TEXT_LINES(emacsframe, h);
+    /* NSLog(@"window_size=%dx%d (%dx%d)", w, h, cols, rows); */
+    FRAME_PIXEL_WIDTH (emacsframe) = w;
+    FRAME_PIXEL_HEIGHT (emacsframe) = h;
+    change_frame_size (emacsframe, rows, cols, 0, 1, 0);
+    SET_FRAME_GARBAGED (emacsframe);
+    cancel_mouse_face (emacsframe);
+    [view setFrame: NSMakeRect (0, 0, w, h)];
+    ns_send_appdefined (-1);
+}
+#endif
+
+#if defined (NS_IMPL_COCOA) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
+/* Do not use Emacs upstram windowDidExitFullScreen since it is broken */
+- (void)windowDidExitFullScreen:(NSNotification *)notification
+{
+    NSTRACE (windowDidExitFullScreen);
+    /* NSLog(@"Calling windowDidExitFullScreen"); */
+    NSWindow *window = [self window];
+    NSRect wr = [window frame];
+    int w = (int)wr.size.width - emacsframe->border_width;
+    int h = (int)wr.size.height
+    - FRAME_NS_TITLEBAR_HEIGHT (emacsframe)
+    - FRAME_TOOLBAR_HEIGHT (emacsframe);
+    cols = FRAME_PIXEL_WIDTH_TO_TEXT_COLS(emacsframe, w);
+    rows = FRAME_PIXEL_HEIGHT_TO_TEXT_LINES(emacsframe, h);
+    /* NSLog(@"window_size=%dx%d (%dx%d)", w, h, cols, rows); */
+    FRAME_PIXEL_WIDTH (emacsframe) = w;
+    FRAME_PIXEL_HEIGHT (emacsframe) = h;
+    change_frame_size (emacsframe, rows, cols, 0, 1, 0);
+    SET_FRAME_GARBAGED (emacsframe);
+    cancel_mouse_face (emacsframe);
+    ns_send_appdefined (-1);
+}
+#endif
+
+#if defined (NS_IMPL_COCOA) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
+- (NSApplicationPresentationOptions)window:(NSWindow *)window willUseFullScreenPresentationOptions:(NSApplicationPresentationOptions)proposedOptions
+{
+    /* NSLog(@"Calling window:willUseFullScreenPresentationOptions: %d", proposedOptions); */
+    return proposedOptions | NSApplicationPresentationAutoHideToolbar;
+}
+#endif
+
+
 - (void)windowDidBecomeKey: (NSNotification *)notification
 /* cf. x_detect_focus_change(), x_focus_changed(), x_new_focus_frame() */
 {
@@ -5708,6 +5726,14 @@ not_in_argv (NSString *arg)
   [NSApp registerServicesMenuSendTypes: ns_send_types
                            returnTypes: nil];
 
+#if defined (NS_IMPL_COCOA) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
+  if (NSApp != nil && [NSApp isActive])
+  {
+    [NSApp setPresentationOptions: NSApplicationPresentationFullScreen | [NSApp presentationOptions] ];
+    [win setCollectionBehavior: NSWindowCollectionBehaviorFullScreenPrimary | [win collectionBehavior] ];
+  }
+#endif
+
   ns_window_num++;
   return self;
 }
@@ -5853,36 +5879,12 @@ not_in_argv (NSString *arg)
   fs_before_fs = fs_state;
 }
 
-- (void)windowDidEnterFullScreen:(NSNotification *)notification
-{
-  [self setFSValue: FULLSCREEN_BOTH];
-#ifdef NEW_STYLE_FS
-  // Fix bad background.
-  if ([toolbar isVisible])
-    {
-      [toolbar setVisible:NO];
-      [toolbar setVisible:YES];
-    }
-#else
-  [self windowDidBecomeKey:notification];
-  [nonfs_window orderOut:self];
-#endif
-}
-
 - (void)windowWillExitFullScreen:(NSNotification *)notification
 {
   if (next_maximized != -1)
     fs_before_fs = next_maximized;
 }
 
-- (void)windowDidExitFullScreen:(NSNotification *)notification
-{
-  [self setFSValue: fs_before_fs];
-  fs_before_fs = -1;
-  if (next_maximized != -1)
-    [[self window] performZoom:self];
-}
-
 - (void)toggleFullScreen: (id)sender
 {
 #ifdef NEW_STYLE_FS
